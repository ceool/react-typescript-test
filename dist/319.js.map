{"version":3,"sources":["webpack://slack-react-ts/./pages/SignUp/index.tsx"],"names":["data","userData","useSWR","fetcher","signUpError","setSignUpError","useState","signUpSuccess","setSignUpSuccess","mismatchError","setMismatchError","email","onChangeEmail","useInput","nickname","onChangeNickname","password","setPassword","passwordCheck","setPasswordCheck","onChangePassword","useCallback","e","target","value","onChangePasswordCheck","onSubmit","preventDefault","trim","axios","then","catch","error","response","statusCode","alert","to","id","type","name","onChange","href"],"mappings":"gOAQA,MAwGA,EAxGe,KACb,MAAQA,KAAMC,IAAaC,QAAO,aAAcC,MACzCC,EAAaC,IAAkBC,eAAS,IACxCC,EAAeC,IAAoBF,eAAS,IAC5CG,EAAeC,IAAoBJ,eAAS,IAC5CK,EAAOC,IAAiBC,OAAS,KACjCC,EAAUC,IAAoBF,OAAS,KACvCG,EAAD,CAAaC,IAAeJ,OAAS,KACpCK,EAAD,CAAkBC,IAAoBN,OAAS,IAE/CO,GAAmBC,kBACtBC,IACCL,EAAYK,EAAEC,OAAOC,OACrBd,EAAiBQ,IAAkBI,EAAEC,OAAOC,SAE9C,CAACN,IAGGO,GAAwBJ,kBAC3BC,IACCH,EAAiBG,EAAEC,OAAOC,OAC1Bd,EAAiBM,IAAaM,EAAEC,OAAOC,SAEzC,CAACR,IAGGU,GAAWL,kBACdC,IACCA,EAAEK,iBACGb,GAAaA,EAASc,SAGtBnB,IACHJ,GAAe,GACfG,GAAiB,GACjBqB,SACQ,aAAc,CAAElB,QAAOG,WAAUE,aACtCc,MAAK,KACJtB,GAAiB,MAElBuB,OAAOC,IAAU,QAChB3B,EAAoD,OAArC,UAAA2B,EAAMC,gBAAN,mBAAgBjC,YAAhB,eAAsBkC,oBAI7C,CAACvB,EAAOG,EAAUE,EAAUP,IAG9B,OAAIF,GACF4B,MAAM,uBACC,gBAAC,KAAD,CAAUC,GAAG,YAElBnC,EACK,gBAAC,KAAD,CAAUmC,GAAG,sBAIpB,uBAAKC,GAAG,aACN,gBAAC,KAAD,eACA,gBAAC,KAAD,CAAMX,SAAUA,GACd,gBAAC,KAAD,CAAOW,GAAG,eACR,sCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,QAAQD,GAAG,QAAQE,KAAK,QAAQf,MAAOb,EAAO6B,SAAU5B,MAGxE,gBAAC,KAAD,CAAOyB,GAAG,kBACR,mCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,OAAOD,GAAG,WAAWE,KAAK,WAAWf,MAAOV,EAAU0B,SAAUzB,MAGhF,gBAAC,KAAD,CAAOsB,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,WAAWD,GAAG,WAAWE,KAAK,WAAWf,MAAOR,EAAUwB,SAAUpB,MAGpF,gBAAC,KAAD,CAAOiB,GAAG,wBACR,uCACA,2BACE,gBAAC,KAAD,CACEC,KAAK,WACLD,GAAG,iBACHE,KAAK,iBACLf,MAAON,EACPsB,SAAUf,KAGbhB,GAAiB,gBAAC,KAAD,0BAChBK,GAAY,gBAAC,KAAD,qBACbV,GAAe,gBAAC,KAAD,uBACfG,GAAiB,gBAAC,KAAD,6BAEpB,gBAAC,KAAD,CAAQ+B,KAAK,UAAb,SAEF,gBAAC,KAAD,mBAEE,qBAAGG,KAAK,UAAR","file":"319.js","sourcesContent":["import useInput from '@hooks/useInput';\nimport { Button, Error, Form, Header, Input, Label, LinkContainer, Success } from '@pages/SignUp/styles';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { useCallback, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst SignUp = () => {\n  const { data: userData } = useSWR('/api/users', fetcher);\n  const [signUpError, setSignUpError] = useState(false);\n  const [signUpSuccess, setSignUpSuccess] = useState(false);\n  const [mismatchError, setMismatchError] = useState(false);\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, , setPassword] = useInput('');\n  const [passwordCheck, , setPasswordCheck] = useInput('');\n\n  const onChangePassword = useCallback(\n    (e) => {\n      setPassword(e.target.value);\n      setMismatchError(passwordCheck !== e.target.value);\n    },\n    [passwordCheck],\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e) => {\n      setPasswordCheck(e.target.value);\n      setMismatchError(password !== e.target.value);\n    },\n    [password],\n  );\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!nickname || !nickname.trim()) {\n        return;\n      }\n      if (!mismatchError) {\n        setSignUpError(false);\n        setSignUpSuccess(false);\n        axios\n          .post('/api/users', { email, nickname, password })\n          .then(() => {\n            setSignUpSuccess(true);\n          })\n          .catch((error) => {\n            setSignUpError(error.response?.data?.statusCode === 403);\n          });\n      }\n    },\n    [email, nickname, password, mismatchError],\n  );\n\n  if (signUpSuccess) {\n    alert('회원가입되었습니다! 로그인해주세요.');\n    return <Redirect to=\"/login\" />;\n  }\n  if (userData) {\n    return <Redirect to=\"/workspace/sleact\" />;\n  }\n\n  return (\n    <div id=\"container\">\n      <Header>Sleact</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\n          </div>\n        </Label>\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <div>\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" value={nickname} onChange={onChangeNickname} />\n          </div>\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n        </Label>\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              type=\"password\"\n              id=\"password-check\"\n              name=\"password-check\"\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n            />\n          </div>\n          {mismatchError && <Error>비밀번호가 일치하지 않습니다.</Error>}\n          {!nickname && <Error>닉네임을 입력해주세요.</Error>}\n          {signUpError && <Error>이미 가입된 이메일입니다.</Error>}\n          {signUpSuccess && <Success>회원가입되었습니다! 로그인해주세요.</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 회원이신가요?&nbsp;\n        <a href=\"/login\">로그인 하러가기</a>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"sourceRoot":""}