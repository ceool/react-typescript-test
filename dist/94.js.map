{"version":3,"sources":["webpack://slack-react-ts/./pages/DirectMessage/styles.tsx","webpack://slack-react-ts/./pages/DirectMessage/index.tsx"],"names":["Container","Header","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","dragOver","setDragOver","useState","onMessage","useCallback","SenderId","Number","unshift","then","current","getScrollHeight","getClientHeight","getScrollTop","console","log","getValues","setTimeout","scrollToBottom","useEffect","on","off","onSubmitForm","e","preventDefault","trim","savedChat","prevChatData","content","Sender","ReceiverId","Receiver","createdAt","Date","axios","catch","error","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"mappings":"0JAEO,MAAMA,GAAY,cAAH,oBAAG,CAAH,oHAQTC,GAAS,iBAAH,oBAAG,CAAH,kPAcK,cAAH,oBAAG,CAAH,mM,oICTrB,MAyGA,EAzGsB,KAAM,QAC1B,MAAM,UAAEC,EAAF,GAAaC,IAAOC,WAClBC,KAAMC,IAAaC,QAAQ,mBAAkBL,WAAmBC,IAAMK,MACtEH,KAAMI,IAAWF,QAAO,aAAcC,MACvCE,EAAMC,EAAcC,IAAWC,OAAS,KACvCR,KAAMS,EAAUC,OAAQC,EAA1B,WAAsCC,EAAtC,QAAkDC,IAAYC,SACjEC,GAAW,mBAAkBlB,SAAiBC,2BAA4BiB,EAAQ,KACnFZ,MAEKa,IAAUC,OAAUpB,GAErBqB,EADoC,KAA1BT,SAAA,UAAAA,EAAW,UAAX,eAAeU,SACGV,IAAY,UAAAA,EAASA,EAASU,OAAS,UAA3B,eAA+BA,QAAS,KAAO,EACvFC,GAAeC,YAAmB,OACjCC,EAAUC,IAAeC,eAAS,GAEnCC,GAAYC,kBAAa1B,IAEzBA,EAAK2B,WAAaC,OAAO9B,IAAOM,EAAON,KAAO8B,OAAO9B,IACvDa,GAAYF,IACVA,WAAW,GAAGoB,QAAQ7B,GACfS,KACN,GAAOqB,MAAK,KAKT,MAJAV,EAAaW,SAEbX,EAAaW,QAAQC,kBACrBZ,EAAaW,QAAQE,kBAAoBb,EAAaW,QAAQG,eAAiB,MAE/EC,QAAQC,IAAI,kBAAZ,UAA+BhB,EAAaW,eAA5C,aAA+B,EAAsBM,aACrDC,YAAW,KAAM,MACf,UAAAlB,EAAaW,eAAb,SAAsBQ,mBACrB,UAKV,KAEHC,gBAAU,KACRxB,WAAQyB,GAAG,KAAMhB,GACV,KACLT,WAAQ0B,IAAI,KAAMjB,MAEnB,CAACT,EAAQS,KAEZe,gBAAU,KACiB,KAArB/B,aAAA,EAAAA,EAAUU,SACZmB,YAAW,KAAM,MACf,UAAAlB,EAAaW,eAAb,SAAsBQ,mBACrB,OAEJ,CAAC9B,IAEJ,MAAMkC,GAAejB,kBAClBkB,IAGC,GAFAA,EAAEC,iBACFV,QAAQC,IAAI/B,GACRA,WAAMyC,QAAUrC,EAAU,CAC5B,MAAMsC,EAAY1C,EAClBM,GAAYqC,IAAiB,MAU3B,OATAA,WAAe,GAAGnB,QAAQ,CACxB/B,KAAK,UAAAW,EAAS,GAAG,UAAZ,eAAgBX,KAAM,GAAK,EAChCmD,QAASF,EACTpB,SAAUvB,EAAON,GACjBoD,OAAQ9C,EACR+C,WAAYlD,EAASH,GACrBsD,SAAUnD,EACVoD,UAAW,IAAIC,OAEVN,KACN,GAAOlB,MAAK,KAAM,MACnBvB,EAAQ,IACR,UAAAa,EAAaW,eAAb,SAAsBQ,oBAExBgB,SACS,mBAAkB1D,SAAiBC,UAAY,CACpDmD,QAAS5C,IAEVyB,MAAK,KACJlB,OAED4C,MAAMrB,QAAQsB,UAGrB,CAACpD,EAAMI,EAAUL,EAAQH,EAAUJ,EAAWC,IAGhD,IAAKG,IAAaG,EAChB,OAAO,KAGT,MAAMsD,GAAeC,OAAYlD,EAAWA,EAASmD,OAAOC,UAAY,IAExE,OACE,gBAAClE,EAAD,KACE,gBAACC,EAAD,KACE,uBAAKkE,IAAKC,QAAa9D,EAAS+D,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAKlE,EAASmE,WACjF,4BAAOnE,EAASmE,WAElB,gBAACC,EAAA,EAAD,CAAUX,aAAcA,EAAcY,IAAKlD,EAAcP,QAASA,EAASK,cAAeA,IAC1F,gBAACqD,EAAA,EAAD,CAASlE,KAAMA,EAAMC,aAAcA,EAAcqC,aAAcA","file":"94.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import { Container, Header, DragOver } from '@pages/DirectMessage/styles';\nimport { IDM } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport gravatar from 'gravatar';\nimport { useParams } from 'react-router';\nimport useSWR, { useSWRInfinite } from 'swr';\nimport useInput from '@hooks/useInput';\nimport ChatList from '@components/ChatList';\nimport ChatBox from '@components/ChatBox';\nimport makeSection from '@utils/makeSection';\nimport Scrollbars from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const onMessage = useCallback((data: IDM) => {\n    // id는 상대방 아이디\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      setTimeout(() => {\n        scrollbarRef.current?.scrollToBottom();\n      }, 100);\n    }\n  }, [chatData]);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      {/*{dragOver && <DragOver>업로드!</DragOver>}*/}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"sourceRoot":""}