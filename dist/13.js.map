{"version":3,"sources":["webpack://slack-react-ts/./components/ChatBox/styles.tsx","webpack://slack-react-ts/./components/ChatBox/index.tsx","webpack://slack-react-ts/./components/Chat/styles.tsx","webpack://slack-react-ts/./components/Chat/index.tsx","webpack://slack-react-ts/./components/ChatList/styles.tsx","webpack://slack-react-ts/./components/ChatList/index.tsx","webpack://slack-react-ts/./utils/makeSection.ts"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","data","userData","error","revalidate","mutate","useSWR","fetcher","dedupingInterval","memberData","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyPress","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","data-qa","aria-label","data-sk","type","disabled","aria-hidden","ChatWrapper","Chat","user","Sender","User","result","useMemo","content","startsWith","style","maxHeight","regexifyString","input","pattern","decorator","match","arr","to","fontSize","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","forwardRef","chatSections","setSize","isReachingEnd","scrollRef","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"mappings":"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","file":"13.js","sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from '@components/ChatBox/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyPress={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n","import { ChatWrapper } from '@components/Chat/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { VFC, memo, useMemo } from 'react';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst BACK_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3095' : 'https://sleact.nodebird.com';\nconst Chat: VFC<Props> = ({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const user = 'Sender' in data ? data.Sender : data.User;\n\n  const result = useMemo(\n    () =>\n      data.content.startsWith('uploads\\\\') ? (\n        <img src={`${BACK_URL}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          input: data.content,\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            return <br key={index} />;\n          },\n        })\n      ),\n    [workspace, data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span style={{ fontSize: 12 }}>{dayjs(data.createdAt).format(' A h:mm')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { useCallback, forwardRef, RefObject, MutableRefObject } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n}\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        console.log('가장 위');\n        setSize((prevSize) => prevSize + 1).then(() => {\n          // 스크롤 위치 유지\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n          if (current) {\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [scrollRef, isReachingEnd, setSize],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"sourceRoot":""}