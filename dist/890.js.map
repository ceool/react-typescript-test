{"version":3,"sources":["webpack://slack-react-ts/./components/DMList/styles.tsx","webpack://slack-react-ts/./components/EachChannel/index.tsx","webpack://slack-react-ts/./components/ChannelList/index.tsx","webpack://slack-react-ts/./components/Modal/styles.tsx","webpack://slack-react-ts/./components/Modal/index.tsx","webpack://slack-react-ts/./components/CreateChannelModal/index.tsx","webpack://slack-react-ts/./components/EachDM/index.tsx","webpack://slack-react-ts/./hooks/useSocket.ts","webpack://slack-react-ts/./components/DMList/index.tsx","webpack://slack-react-ts/./components/InviteWorkspaceModal/index.tsx","webpack://slack-react-ts/./components/KickWorkspaceModal/index.tsx","webpack://slack-react-ts/./components/Menu/styles.tsx","webpack://slack-react-ts/./components/Menu/index.tsx","webpack://slack-react-ts/./components/ChatBox/styles.tsx","webpack://slack-react-ts/./components/ChatBox/index.tsx","webpack://slack-react-ts/./components/Chat/styles.tsx","webpack://slack-react-ts/./components/Chat/index.tsx","webpack://slack-react-ts/./components/ChatList/styles.tsx","webpack://slack-react-ts/./components/ChatList/index.tsx","webpack://slack-react-ts/./components/InviteChannelModal/index.tsx","webpack://slack-react-ts/./pages/Channel/styles.tsx","webpack://slack-react-ts/./utils/makeSection.ts","webpack://slack-react-ts/./pages/Channel/index.tsx","webpack://slack-react-ts/./pages/DirectMessage/styles.tsx","webpack://slack-react-ts/./pages/DirectMessage/index.tsx","webpack://slack-react-ts/./layouts/Workspace/styles.tsx","webpack://slack-react-ts/./layouts/Workspace/index.tsx"],"names":["CollapseButton","collapse","channel","workspace","useParams","location","useLocation","data","userData","useSWR","fetcher","dedupingInterval","date","localStorage","getItem","name","count","mutate","useEffect","pathname","key","activeClassName","to","className","undefined","channelCollapse","setChannelCollapse","useState","channelData","toggleChannelCollapse","useCallback","prev","onClick","data-qa","aria-hidden","map","id","CreateModal","CloseModalButton","show","children","onCloseModal","stopPropagation","e","setShowCreateChannelModal","params","newChannel","onChangeNewChannel","setNewChannel","useInput","revalidate","revalidateChannel","onCreateChannel","preventDefault","trim","axios","then","catch","error","console","dir","toast","response","position","onSubmit","value","onChange","member","isOnline","data-qa-presence-self","data-qa-presence-active","data-qa-presence-dnd","nickname","sockets","disconnect","io","transports","info","memberData","socket","useSocket","onlineList","setOnlineList","log","on","hasListeners","off","includes","setShowInviteWorkspaceModal","newMember","onChangeNewMember","setNewMember","revalidateMember","onInviteMember","email","type","kickMember","setShowKickWorkspaceModal","onKickMember","target","CreateMenu","Menu","closeButton","style","defaultProps","ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","onSubmitForm","chat","onChangeChat","placeholder","textareaRef","useRef","current","autosize","onKeydownChat","shiftKey","renderUserSuggestion","search","highlightedDisplay","index","src","gravatar","s","d","alt","onKeyPress","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","v","display","renderSuggestion","aria-label","data-sk","disabled","ChatWrapper","memo","user","Sender","User","result","useMemo","content","startsWith","maxHeight","regexifyString","pattern","decorator","match","arr","input","dayjs","createdAt","format","ChatZone","Section","StickyHeader","scrollbarRef","isReachingEnd","isEmpty","chatSections","setSize","onScroll","values","scrollTop","size","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","chats","setShowInviteChannelModal","revalidateMembers","Container","Header","DragOver","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push","channelsData","find","chatData","mutateChat","useSWRInfinite","onSuccess","length","setTimeout","scrollToBottom","channelMembersData","setChat","showInviteChannelModal","dragOver","setDragOver","savedChat","prevChatData","unshift","UserId","Date","ChannelId","Channel","setItem","getTime","toString","getValues","onMessage","getClientHeight","getScrollTop","closeOnClick","onClickInviteChannel","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","concat","reverse","flex","justifyContent","alignItems","myData","SenderId","ReceiverId","Receiver","Number","RightMenu","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","disconnectSocket","loginError","revalidateUser","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showInviteWorkspaceModal","showCreateChannelModal","showKickWorkspaceModal","showUserMenu","setShowUserMenu","showWorkspaceModal","setShowWorkspaceModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","newUrl","onChangeNewUrl","setNewUrl","onLogOut","onCreateWorkspace","url","onClickCreateWorkspace","onClickAddChannel","onClickInviteWorkspace","onClickKickWorkspace","onClickUserProfile","toggleWorkspaceModal","emit","channels","right","top","ws","slice","toUpperCase","left","path","component","DirectMessage"],"mappings":"2JAEO,MAAMA,GAAiB,iBAAH,mBAAG,CAAH,wKAYvB,EAAGC,cACHA,GACC,kDAdsB,K,sDCQ3B,MA0BA,EA1BgC,EAAGC,cACjC,MAAM,UAAEC,IAAcC,UAChBC,GAAWC,WACTC,KAAMC,IAAaC,QAAc,aAAcC,IAAS,CAC9DC,iBAAkB,MAEdC,EAAOC,aAAaC,QAAS,GAAEX,KAAaD,EAAQa,SAAW,GAC7DR,KAAMS,EAAR,OAAeC,IAAWR,QAC9BD,EAAY,mBAAkBL,cAAsBD,EAAQa,sBAAsBH,IAAS,KAC3FF,KASF,OANAQ,gBAAU,KACJb,EAASc,WAAc,cAAahB,aAAqBD,EAAQa,QACnEE,EAAO,KAER,CAACA,EAAQZ,EAASc,SAAUhB,EAAWD,IAGxC,gBAAC,KAAD,CAASkB,IAAKlB,EAAQa,KAAMM,gBAAgB,WAAWC,GAAK,cAAanB,aAAqBD,EAAQa,QACpG,wBAAMQ,eAAqBC,IAAVR,GAAuBA,EAAQ,EAAI,YAASQ,GAA7D,KAA2EtB,EAAQa,WACxES,IAAVR,GAAuBA,EAAQ,GAAK,wBAAMO,UAAU,SAASP,KCgBpE,EAlC+B,KAC7B,MAAM,UAAEb,IAAcC,WACfqB,EAAiBC,IAAsBC,eAAS,IAC/CpB,KAAMC,IAAaC,QAAc,aAAcC,IAAS,CAC9DC,iBAAkB,OAEZJ,KAAMqB,IAAgBnB,QAAmBD,EAAY,mBAAkBL,aAAuB,KAAMO,KAEtGmB,GAAwBC,kBAAY,KACxCJ,GAAoBK,IAAUA,MAC7B,IAEH,OACE,gCACE,0BACE,gBAAC/B,EAAD,CAAgBC,SAAUwB,EAAiBO,QAASH,GAClD,qBACEN,UAAU,mKACVU,UAAQ,2BACRC,cAAY,UAGhB,yCAEF,4BACIT,IACAG,aADD,EACCA,EAAaO,KAAKjC,GACT,gBAAC,EAAD,CAAakB,IAAKlB,EAAQkC,GAAIlC,QAASA,UCtC7CmC,GAAc,cAAH,mBAAG,CAAH,4dA0BXC,GAAmB,iBAAH,mBAAG,CAAH,iICF7B,EAlB4C,EAAGC,OAAMC,WAAUC,mBAC7D,MAAMC,GAAkBZ,kBAAaa,IACnCA,EAAED,oBACD,IAEH,OAAKH,EAIH,gBAACF,EAAD,CAAaL,QAASS,GACpB,uBAAKT,QAASU,GACZ,gBAACJ,EAAD,CAAkBN,QAASS,GAA3B,KACCD,IANE,M,qDCEX,MA8CA,EA9CsC,EAAGD,OAAME,eAAcG,gCAC3D,MAAMC,GAASzC,WACT,UAAED,GAAc0C,GACfC,EAAYC,EAAoBC,IAAiBC,OAAS,KACzD1C,KAAMC,IAAaC,QAAsB,aAAcC,MACvDwC,WAAYC,IAAsB1C,QACxCD,EAAY,mBAAkBL,aAAuB,KACrDO,KAGI0C,GAAkBtB,kBACrBa,IACCA,EAAEU,iBACGP,GAAeA,EAAWQ,QAG/BC,SACS,mBAAkBpD,aAAsB,CAC7CY,KAAM+B,IAEPU,MAAK,KACJL,IACAP,GAA0B,GAC1BI,EAAc,OAEfS,OAAOC,IAAU,MAChBC,QAAQC,IAAIF,GACZG,WAAA,UAAYH,EAAMI,gBAAlB,aAAY,EAAgBvD,KAAM,CAAEwD,SAAU,uBAGpD,CAACjB,IAGH,OACE,gBAAC,EAAD,CAAOP,KAAMA,EAAME,aAAcA,GAC/B,wBAAMuB,SAAUZ,GACd,gBAAC,KAAD,CAAOhB,GAAG,iBACR,qCACA,gBAAC,KAAD,CAAOA,GAAG,UAAU6B,MAAOnB,EAAYoB,SAAUnB,KAEnD,gBAAC,KAAD,gBCRR,EArC2B,EAAGoB,SAAQC,eACpC,MAAM,UAAEjE,IAAcC,UAChBC,GAAWC,WACTC,KAAMC,IAAaC,QAAc,aAAcC,IAAS,CAC9DC,iBAAkB,MAEdC,EAAOC,aAAaC,QAAS,GAAEX,KAAagE,EAAO/B,OAAS,GAC1D7B,KAAMS,EAAR,OAAeC,IAAWR,QAC9BD,EAAY,mBAAkBL,SAAiBgE,EAAO/B,oBAAoBxB,IAAS,KACnFF,KASF,OANAQ,gBAAU,KACJb,EAASc,WAAc,cAAahB,QAAgBgE,EAAO/B,MAC7DnB,EAAO,KAER,CAACA,EAAQZ,EAASc,SAAUhB,EAAWgE,IAGxC,gBAAC,KAAD,CAAS/C,IAAK+C,EAAO/B,GAAIf,gBAAgB,WAAWC,GAAK,cAAanB,QAAgBgE,EAAO/B,MAC3F,qBACEb,UAAY,qGACV6C,EAAW,6CAA+C,4BAE5DlC,cAAY,OACZD,UAAQ,qBACRoC,wBAAsB,QACtBC,0BAAwB,QACxBC,uBAAqB,UAEvB,wBAAMhD,UAAWP,GAASA,EAAQ,EAAI,YAASQ,GAAY2C,EAAOK,UACjEL,EAAO/B,MAAO5B,aAAd,EAAcA,EAAU4B,KAAM,oCAC7BpB,GAASA,EAAQ,GAAK,wBAAMO,UAAU,SAASP,IAAkB,O,uBCxCzE,MAEMyD,EAAoD,GAqB1D,EApBmBtE,IACjB,MAAMuE,GAAa5C,kBAAY,KACzB3B,GAAasE,EAAQtE,KACvBsE,EAAQtE,GAAWuE,oBACZD,EAAQtE,MAEhB,CAACA,IACJ,OAAKA,GAGAsE,EAAQtE,KACXsE,EAAQtE,GAAawE,YAAY,4BAAgBxE,IAAa,CAC5DyE,WAAY,CAAC,eAEfjB,QAAQkB,KAAK,gBAAiB1E,EAAWsE,EAAQtE,KAG5C,CAACsE,EAAQtE,GAAYuE,IATnB,MAAClD,EAAWkD,ICoDvB,EAxDe,KACb,MAAM,UAAEvE,IAAcC,WACdG,KAAMC,IAAaC,QAAc,aAAcC,IAAS,CAC9DC,iBAAkB,OAEZJ,KAAMuE,IAAerE,QAC3BD,EAAY,mBAAkBL,YAAsB,KACpDO,MAEKqE,GAAUC,EAAU7E,IACpBsB,EAAiBC,IAAsBC,eAAS,IAChDsD,EAAYC,IAAiBvD,cAAmB,IAEjDE,GAAwBC,kBAAY,KACxCJ,GAAoBK,IAAUA,MAC7B,IAkBH,OAhBAb,gBAAU,KACRyC,QAAQwB,IAAI,wBAAyBhF,GACrC+E,EAAc,MACb,CAAC/E,KAEJe,gBAAU,KACR6D,WAAQK,GAAG,cAAe7E,IACxB2E,EAAc3E,MAEhBoD,QAAQwB,IAAI,eAAgBJ,aAA5B,EAA4BA,EAAQM,aAAa,MAAON,GACjD,KACLpB,QAAQwB,IAAI,gBAAiBJ,aAA7B,EAA6BA,EAAQM,aAAa,OAClDN,WAAQO,IAAI,iBAEb,CAACP,IAGF,gCACE,0BACE,gBAAC/E,EAAD,CAAgBC,SAAUwB,EAAiBO,QAASH,GAClD,qBACEN,UAAU,mKACVU,UAAQ,2BACRC,cAAY,UAGhB,gDAEF,4BACIT,IACAqD,aADD,EACCA,EAAY3C,KAAKgC,IACf,MAAMC,EAAWa,EAAWM,SAASpB,EAAO/B,IAC5C,OAAO,gBAAC,EAAD,CAAQhB,IAAK+C,EAAO/B,GAAI+B,OAAQA,EAAQC,SAAUA,WCErE,EA7CwC,EAAG7B,OAAME,eAAc+C,kCAC7D,MAAM,UAAErF,IAAcC,WACfqF,EAAWC,EAAmBC,IAAgB1C,OAAS,KACtD1C,KAAMC,IAAaC,QAAc,aAAcC,MAC/CwC,WAAY0C,IAAqBnF,QACvCD,EAAY,mBAAkBL,YAAsB,KACpDO,KAGImF,GAAiB/D,kBACpBa,IACCA,EAAEU,iBACGoC,GAAcA,EAAUnC,QAG7BC,SACS,mBAAkBpD,YAAqB,CAC5C2F,MAAOL,IAERjC,MAAK,KACJoC,IACAJ,GAA4B,GAC5BG,EAAa,OAEdlC,OAAOC,IAAU,MAChBC,QAAQC,IAAIF,GACZG,WAAA,UAAYH,EAAMI,gBAAlB,aAAY,EAAgBvD,KAAM,CAAEwD,SAAU,uBAGpD,CAAC5D,EAAWsF,IAGd,OACE,gBAAC,EAAD,CAAOlD,KAAMA,EAAME,aAAcA,GAC/B,wBAAMuB,SAAU6B,GACd,gBAAC,KAAD,CAAOzD,GAAG,gBACR,mCACA,gBAAC,KAAD,CAAOA,GAAG,SAAS2D,KAAK,QAAQ9B,MAAOwB,EAAWvB,SAAUwB,KAE9D,gBAAC,KAAD,CAAQK,KAAK,UAAb,WC7CR,IAAIC,EAAa,GAOjB,MA+EA,EA/EsC,EAAGzD,OAAME,eAAcwD,gCAC3D,MAAM,UAAE9F,IAAcC,WACdG,KAAMC,IAAaC,QAAc,aAAcC,IAAS,CAC9DC,iBAAkB,OAEZJ,KAAMuE,IAAerE,QAAgBD,EAAY,mBAAkBL,YAAsB,KAAMO,MAC/FwC,WAAY0C,IAAqBnF,QACvCD,EAAY,mBAAkBL,YAAsB,KACpDO,KAUIwF,GAAepE,kBAClBa,IACCA,EAAEU,iBACG2C,GAAeA,EAAW1C,QAAyB,MAAf0C,EAIvCzC,WACW,mBAAkBpD,aAAqB6F,KAC/CxC,MAAK,KACJyC,GAA0B,GAC1BD,EAAa,GACbJ,OAEDnC,OAAOC,IACNC,QAAQC,IAAIF,GACZuC,GAA0B,GAC1BD,EAAa,GACbnC,WAAY,kBAAmB,CAAEE,SAAU,qBAd/CF,WAAY,cAAe,CAAEE,SAAU,oBAkB3C,CAAC5D,IAGH,OACE,gBAAC,EAAD,CAAOoC,KAAMA,EAAME,aAAcA,GAC/B,wBAAMuB,SAAUkC,GACd,gBAAC,KAAD,CAAO9D,GAAG,gBACR,sCAEA,gBAAC,KAAD,CACEA,GAAG,WACH8B,SAAWvB,IACTqD,EAAarD,EAAEwD,OAAOlC,MACtBN,QAAQwB,IAAIxC,EAAEwD,OAAOlC,SAGvB,0BAAQ7C,IAAK,IAAK6C,MAAO,GACtB,SARL,IAWGa,aAXH,EAWGA,EAAY3C,KAAKgC,IAChB,IAAI3D,aAAA,EAAAA,EAAU4B,MAAO+B,EAAO/B,GAC1B,OACE,0BAAQhB,IAAK+C,EAAO/B,GAAI6B,MAAOE,EAAO/B,IACnC+B,EAAOK,cAMlB,2BACA,4BAEF,gBAAC,KAAD,CAAQuB,KAAK,UAAb,aCxFKK,GAAa,cAAH,kBAAG,CAAH,0bAuBV9D,GAAmB,iBAAH,kBAAG,CAAH,iICfvB+D,EAAqC,EAAGC,cAAaC,QAAOhE,OAAMC,WAAUC,mBAChF,MAAMC,GAAkBZ,kBAAaa,IACnCA,EAAED,oBACD,IAEH,OAAKH,EAIH,gBAAC6D,EAAD,CAAYpE,QAASS,GACnB,uBAAKT,QAASU,EAAiB6D,MAAOA,GACnCD,GAAe,gBAAC,EAAD,CAAkBtE,QAASS,GAA3B,KACfD,IANE,MAWX6D,EAAKG,aAAe,CAClBF,aAAa,GAGf,U,cC5BO,MAAMG,GAAW,cAAH,mBAAG,CAAH,6EAORC,GAAO,eAAH,mBAAG,CAAH,6HAQJC,GAAmB,OAAOC,IAAP,qBAAH,+ZA8BhBC,GAAU,cAAH,mBAAG,CAAH,4NAWPC,GAAa,iBAAH,mBAAG,CAAH,8DAMVC,GAAc,iBAAH,mBAAG,CAAH,iJAapB,EAAGC,WACHA,GACC,qDAfmB,K,0CCnDxB,MAgFA,EAhF2B,EAAGC,eAAcC,OAAMC,eAAcC,cAAa7G,WAC3E,MAAM8G,GAAcC,YAA4B,OAChDpG,gBAAU,KACJmG,EAAYE,SACdC,IAASH,EAAYE,WAEtB,CAACF,EAAYE,UAEhB,MAAME,GAAgB3F,kBACnBa,IACe,UAAVA,EAAEvB,MACCuB,EAAE+E,WACL/E,EAAEU,iBACF4D,EAAatE,OAInB,CAACuE,IAGGS,GAMiB7F,kBACrB,CAACqC,EAAQyD,EAAQC,EAAoBC,EAAOd,IACrCzG,EAIH,gBAACwG,EAAD,CAAaC,MAAOA,GAClB,uBAAKe,IAAKC,QAAazH,EAAKuH,GAAOhC,MAAO,CAAEmC,EAAG,OAAQC,EAAG,UAAYC,IAAK5H,EAAKuH,GAAOtD,WACvF,4BAAOqD,IALF,MASX,CAACtH,IAGH,OACE,gBAACkG,EAAD,KACE,gBAACC,EAAD,CAAM1C,SAAUiD,GACd,gBAACN,EAAD,CACEvE,GAAG,cACH6B,MAAOiD,EACPhD,SAAUiD,EACViB,WAAYX,EACZL,YAAaA,EACbiB,SAAUhB,EACViB,6BAA2B,GAE3B,gBAAC,IAAD,CACEC,kBAAgB,EAChBC,QAAQ,IACRjI,MAAMA,aAAA,EAAAA,EAAM4B,KAAKsG,IAAD,CAAUrG,GAAIqG,EAAErG,GAAIsG,QAASD,EAAEjE,eAAgB,GAC/DmE,iBAAkBhB,KAGtB,gBAACd,EAAD,KACE,gBAACC,EAAD,CACEvF,UACE,qIACC2F,WAAM5D,OAAS,GAAK,oCAEvBrB,UAAQ,oBACR2G,aAAW,eACXC,UAAQ,iBACR9C,KAAK,SACL+C,WAAW5B,WAAM5D,SAEjB,qBAAG/B,UAAU,mCAAmCW,cAAY,cCpF3D6G,GAAc,cAAH,oBAAG,CAAH,wY,iCCWxB,MA6CA,GA5CwBC,WAAK,EAAGzI,WAC9B,MAAM,UAAEJ,IAAcC,UAChB6I,EAAc,WAAY1I,EAAOA,EAAK2I,OAAS3I,EAAK4I,KAEpDC,GAASC,cACb,IACE9I,EAAK+I,QAAQC,WAAW,aACtB,uBAAKxB,IAAM,yBAAcxH,EAAK+I,UAAW/C,MAAO,CAAEiD,UAAW,QAE7DC,OAAe,CACbC,QAAS,0BACTC,UAAUC,EAAO9B,GACf,MAAM+B,EAAuBD,EAAMA,MAAM,uBACzC,OAAIC,EAEA,gBAAC,KAAD,CAAMzI,IAAKwI,EAAQ9B,EAAOxG,GAAK,cAAanB,QAAgB0J,EAAI,MAAhE,IACIA,EAAI,IAIL,sBAAIzI,IAAK0G,KAElBgC,MAAOvJ,EAAK+I,WAGlB,CAACnJ,EAAWI,EAAK+I,UAGnB,OACE,gBAACP,EAAD,KACE,uBAAKxH,UAAU,YACb,uBAAKwG,IAAKC,QAAaiB,EAAKnD,MAAO,CAAEmC,EAAG,OAAQC,EAAG,UAAYC,IAAKc,EAAKzE,YAE3E,uBAAKjD,UAAU,aACb,uBAAKA,UAAU,aACb,yBAAI0H,EAAKzE,UACT,4BAAOuF,IAAMxJ,EAAKyJ,WAAWC,OAAO,YAEtC,yBAAIb,QClDCc,GAAW,cAAH,mBAAG,CAAH,0DAMRC,GAAU,kBAAH,mBAAG,CAAH,qEAKPC,GAAe,cAAH,mBAAG,CAAH,+Z,eCAzB,MAgCA,GAhC4B,EAAGC,eAAcC,gBAAeC,UAASC,eAAcC,cACjF,MAAMC,GAAW5I,kBACd6I,IAC0B,IAArBA,EAAOC,WAAoBN,GAAkBC,GAC/CE,GAASI,GAASA,EAAO,IAAGrH,MAAK,KAAM,QACrC,UAAA6G,EAAa9C,eAAb,SAAsBqD,WAAU,UAAAP,EAAa9C,eAAb,eAAsBuD,mBAAoBH,EAAOI,mBAIvF,CAACN,EAASJ,EAAcC,EAAeC,IAGzC,OACE,gBAACL,EAAD,KACE,gBAAC,MAAD,CAAYc,UAAQ,EAACC,IAAKZ,EAAca,cAAeR,GACpDS,OAAOC,QAAQZ,GAAcrI,KAAI,EAAEvB,EAAMyK,KAEtC,gBAAClB,EAAD,CAAS5I,UAAY,WAAUX,IAAQQ,IAAKR,GAC1C,gBAACwJ,EAAD,KACE,8BAASxJ,IAEVyK,EAAMlJ,KAAK+E,GACV,gBAAC,EAAD,CAAM9F,IAAK8F,EAAK9E,GAAI7B,KAAM2G,YC0B1C,GA7CsC,EAAG3E,OAAME,eAAc6I,gCAC3D,MAAM,UAAEnL,EAAF,QAAaD,IAAYE,WACxBqF,EAAWC,EAAmBC,IAAgB1C,OAAS,KACtD1C,KAAMC,IAAaC,QAAc,aAAcC,MAC/CwC,WAAYqI,IAAsB9K,QACxCD,EAAY,mBAAkBL,cAAsBD,YAAoB,KACxEQ,KAGImF,GAAiB/D,kBACpBa,IACCA,EAAEU,iBACGoC,GAAcA,EAAUnC,QAG7BC,SACS,mBAAkBpD,cAAsBD,YAAmB,CAChE4F,MAAOL,IAERjC,MAAK,KACJ+H,IACAD,GAA0B,GAC1B3F,EAAa,OAEdlC,OAAOC,IAAU,MAChBC,QAAQC,IAAIF,GACZG,WAAA,UAAYH,EAAMI,gBAAlB,aAAY,EAAgBvD,KAAM,CAAEwD,SAAU,uBAGpD,CAAC0B,IAGH,OACE,gBAAC,EAAD,CAAOlD,KAAMA,EAAME,aAAcA,GAC/B,wBAAMuB,SAAU6B,GACd,gBAAC,KAAD,CAAOzD,GAAG,gBACR,wCACA,gBAAC,KAAD,CAAOA,GAAG,SAAS6B,MAAOwB,EAAWvB,SAAUwB,KAEjD,gBAAC,KAAD,CAAQK,KAAK,UAAb,WCrDKyF,IAAY,cAAH,oBAAG,CAAH,oHAQTC,IAAS,iBAAH,oBAAG,CAAH,wNAWNC,IAAW,cAAH,oBAAG,CAAH,mMClBN,SAASC,GAAmCC,GACzD,MAAMC,EAAmC,GASzC,OARAD,EAASE,SAAS5E,IAChB,MAAM6E,EAAYhC,IAAM7C,EAAK8C,WAAWC,OAAO,cAC3C+B,MAAMC,QAAQJ,EAASE,IACzBF,EAASE,GAAWG,KAAKhF,GAEzB2E,EAASE,GAAa,CAAC7E,MAGpB2E,ECIT,MAwMA,GAvMgB,KAAM,QACpB,MAAM,UAAE1L,EAAF,QAAaD,IAAYE,WACxB2E,GAAUC,EAAU7E,IACnBI,KAAMC,IAAaC,QAAc,aAAcC,MAC/CH,KAAM4L,IAAiB1L,QAAoB,mBAAkBN,aAAsBO,KACrFkB,EAAcuK,aAAH,EAAGA,EAAcC,MAAM3D,GAAMA,EAAE1H,OAASb,KACjDK,KAAM8L,EAAUpL,OAAQqL,EAA1B,QAAsC7B,IAAY8B,SACrDzE,GAAW,mBAAkB3H,cAAsBD,2BAA2C4H,EAAQ,KACvGpH,IACA,CACE8L,UAAUjM,GACa,KAAjBA,aAAA,EAAAA,EAAMkM,SACRC,YAAW,KAAM,MACf,UAAArC,EAAa9C,eAAb,SAAsBoF,mBACrB,SAKHpM,KAAMqM,IAAuBnM,QACnCD,EAAY,mBAAkBL,cAAsBD,YAAoB,KACxEQ,MAEKwG,EAAMC,EAAc0F,IAAW5J,OAAS,KACxC6J,EAAwBxB,IAA6B3J,eAAS,GAC/D0I,GAAe/C,YAAmB,OACjCyF,EAAUC,IAAerL,eAAS,GAEnC4I,EAAoC,KAA1B8B,SAAA,UAAAA,EAAW,UAAX,eAAeI,QACzBnC,EAAgBC,GAAY8B,IAAY,UAAAA,EAASA,EAASI,OAAS,UAA3B,eAA+BA,QA9B7D,GAgCVhK,GAAeX,kBAAY,KAC/BwJ,GAA0B,KACzB,IAEGrE,GAAenF,kBAClBa,IAEC,GADAA,EAAEU,iBACE6D,WAAM5D,QAAU+I,GAAYzK,GAAepB,EAAU,CACvD,MAAMyM,EAAY/F,EAClBoF,GAAYY,IAAiB,MAU3B,OATAA,WAAe,GAAGC,QAAQ,CACxB/K,KAAK,UAAAiK,EAAS,GAAG,UAAZ,eAAgBjK,KAAM,GAAK,EAChCkH,QAAS2D,EACTG,OAAQ5M,EAAS4B,GACjB+G,KAAM3I,EACNwJ,UAAW,IAAIqD,KACfC,UAAW1L,EAAYQ,GACvBmL,QAAS3L,IAEJsL,KACN,GAAO1J,MAAK,KAGa,MAF1B3C,aAAa2M,QAAS,GAAErN,KAAaD,KAAW,IAAImN,MAAOI,UAAUC,YACrEb,EAAQ,IACJxC,EAAa9C,UACf5D,QAAQwB,IAAI,kBAAZ,UAA+BkF,EAAa9C,eAA5C,aAA+B,EAAsBoG,aACrDtD,EAAa9C,QAAQoF,qBAGzBpJ,SACS,mBAAkBpD,cAAsBD,UAAiB,CAC9DoJ,QAAS2D,IAEVxJ,MAAME,QAAQD,UAGrB,CAACwD,EAAM/G,EAAWD,EAAS0B,EAAapB,EAAU6L,IAG9CuB,GAAY9L,kBACfvB,IACKA,EAAKgN,QAAQxM,OAASb,IAAYK,EAAK+I,QAAQC,WAAW,cAAgBhJ,EAAK6M,UAAW5M,aAAhB,EAAgBA,EAAU4B,KACtGkK,GAAYD,IACVA,WAAW,GAAGc,QAAQ5M,GACf8L,KACN,GAAO7I,MAAK,KAKT,MAJA6G,EAAa9C,UAEb8C,EAAa9C,QAAQuD,kBACrBT,EAAa9C,QAAQsG,kBAAoBxD,EAAa9C,QAAQuG,eAAiB,KAE/EnK,QAAQwB,IAAI,kBAAZ,UAA+BkF,EAAa9C,eAA5C,aAA+B,EAAsBoG,aACrDjB,YAAW,KAAM,MACf,UAAArC,EAAa9C,eAAb,SAAsBoF,mBACrB,MAEH9I,aAAc,iBAAkB,CAC9B7B,UAAU,MACR,UAAAqI,EAAa9C,eAAb,SAAsBoF,kBAExBoB,cAAc,UAO1B,CAAC7N,EAASM,EAAU8L,KAGtBpL,gBAAU,KACR6D,WAAQK,GAAG,UAAWwI,GACf,KACL7I,WAAQO,IAAI,UAAWsI,MAExB,CAAC7I,EAAQ6I,KAEZ1M,gBAAU,KACRL,aAAa2M,QAAS,GAAErN,KAAaD,KAAW,IAAImN,MAAOI,UAAUC,cACpE,CAACvN,EAAWD,IAEf,MAAM8N,GAAuBlM,kBAAY,KACvCwJ,GAA0B,KACzB,IAEG2C,GAASnM,kBACZa,IACCA,EAAEU,iBACFM,QAAQwB,IAAIxC,GACZ,MAAMuL,EAAW,IAAIC,SACrB,GAAIxL,EAAEyL,aAAaC,OAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAI3L,EAAEyL,aAAaC,MAAM5B,OAAQ6B,IAE/C,GAAqC,SAAjC3L,EAAEyL,aAAaC,MAAMC,GAAGC,KAAiB,CAC3C,MAAMC,EAAO7L,EAAEyL,aAAaC,MAAMC,GAAGG,YACrC9K,QAAQwB,IAAI,YAAcmJ,EAAI,YAAcE,EAAKzN,MACjDmN,EAASQ,OAAO,QAASF,SAK7B,IAAK,IAAIF,EAAI,EAAGA,EAAI3L,EAAEyL,aAAaO,MAAMlC,OAAQ6B,IAC/C3K,QAAQwB,IAAI,YAAcmJ,EAAI,YAAc3L,EAAEyL,aAAaO,MAAML,GAAGvN,MACpEmN,EAASQ,OAAO,QAAS/L,EAAEyL,aAAaO,MAAML,IAGlD/K,SAAY,mBAAkBpD,cAAsBD,WAAkBgO,GAAU1K,MAAK,KACnFwJ,GAAY,GACZnM,aAAa2M,QAAS,GAAErN,KAAaD,KAAW,IAAImN,MAAOI,UAAUC,iBAGzE,CAACvN,EAAWD,IAGR0O,GAAa9M,kBAAaa,IAC9BA,EAAEU,iBACFM,QAAQwB,IAAIxC,GACZqK,GAAY,KACX,IAEH,GAAIb,IAAiBvK,EACnB,OAAO,gBAAC,KAAD,CAAUN,GAAK,cAAanB,iBAGrC,MAAMqK,EAAemB,GAAYU,EAAY,GAAewC,UAAUxC,GAAUyC,UAAY,IAE5F,OACE,gBAACtD,GAAD,CAAWyC,OAAQA,EAAQW,WAAYA,GACrC,gBAACnD,GAAD,KACE,gCAAQvL,GACR,uBAAKqG,MAAO,CAAEmC,QAAS,OAAQqG,KAAM,EAAGC,eAAgB,WAAYC,WAAY,WAC9E,4BAAOrC,aAAP,EAAOA,EAAoBH,QAC3B,0BACEzK,QAASgM,EACTzM,UAAU,8CACVqH,aAAW,8BACXC,UAAQ,iBACR9C,KAAK,UAEL,qBAAGxE,UAAU,yDAAyDW,cAAY,YAIxF,gBAAC,GAAD,CACEmI,aAAcA,EACdC,cAAeA,EACfC,QAASA,EACTC,aAAcA,EACdC,QAASA,IAEX,gBAAC,EAAD,CACExD,aAAcA,EACdC,KAAMA,EACNC,aAAcA,EACdC,YAAc,YAAWlH,IACzBK,KAAMqM,IAER,gBAAC,GAAD,CACErK,KAAMuK,EACNrK,aAAcA,EACd6I,0BAA2BA,IAE7B,gBAAC,KAAD,CAAgBvH,SAAS,kBACxBgJ,GAAY,gBAACrB,GAAD,eClNNF,IAAY,cAAH,oBAAG,CAAH,oHAQTC,IAAS,iBAAH,oBAAG,CAAH,iPCiLnB,GAzKsB,KAAM,QAC1B,MAAM,UAAEtL,EAAF,GAAaiC,IAAOhC,WACnB2E,GAAUC,EAAU7E,IACnBI,KAAM2O,IAAWzO,QAAO,aAAcC,MACtCH,KAAMC,IAAaC,QAAQ,mBAAkBN,WAAmBiC,IAAM1B,MACtEH,KAAM8L,EAAUpL,OAAQqL,EAA1B,QAAsC7B,EAAtC,WAA+CvH,IAAeqJ,SACjEzE,GAAW,mBAAkB3H,SAAiBiC,2BAAsC0F,EAAQ,KAC7FpH,IACA,CACE8L,UAAUjM,GACa,KAAjBA,aAAA,EAAAA,EAAMkM,SACRC,YAAW,KAAM,MACf,UAAArC,EAAa9C,eAAb,SAAsBoF,mBACrB,SAKJzF,EAAMC,EAAc0F,IAAW5J,OAAS,IACzCoH,GAAe/C,YAAmB,OACjCyF,EAAUC,IAAerL,eAAS,GAEnC4I,EAAoC,KAA1B8B,SAAA,UAAAA,EAAW,UAAX,eAAeI,QACzBnC,EAAgBC,GAAY8B,IAAY,UAAAA,EAASA,EAASI,OAAS,UAA3B,eAA+BA,QAxB7D,GA0BVxF,GAAenF,kBAClBa,IAEC,GADAA,EAAEU,iBACE6D,WAAM5D,QAAU+I,EAAU,CAC5B,MAAMY,EAAY/F,EAClBoF,GAAYY,IAAiB,MAU3B,OATAA,WAAe,GAAGC,QAAQ,CACxB/K,KAAK,UAAAiK,EAAS,GAAG,UAAZ,eAAgBjK,KAAM,GAAK,EAChCkH,QAAS2D,EACTkC,SAAUD,EAAO9M,GACjB8G,OAAQgG,EACRE,WAAY5O,EAAS4B,GACrBiN,SAAU7O,EACVwJ,UAAW,IAAIqD,OAEVH,KACN,GAAO1J,MAAK,KAGa,MAF1B3C,aAAa2M,QAAS,GAAErN,KAAaiC,KAAM,IAAIiL,MAAOI,UAAUC,YAChEb,EAAQ,IACJxC,EAAa9C,UACf5D,QAAQwB,IAAI,kBAAZ,UAA+BkF,EAAa9C,eAA5C,aAA+B,EAAsBoG,aACrDtD,EAAa9C,QAAQoF,qBAGzBpJ,SACS,mBAAkBpD,SAAiBiC,UAAY,CACpDkH,QAASpC,IAEVzD,MAAME,QAAQD,UAGrB,CAACwD,EAAM/G,EAAWiC,EAAI8M,EAAQ1O,EAAU6L,IAGpCuB,GAAY9L,kBACfvB,IACKA,EAAK4O,WAAaG,OAAOlN,IAAO8M,EAAO9M,KAAOkN,OAAOlN,IACvDkK,GAAYD,IACVA,WAAW,GAAGc,QAAQ5M,GACf8L,KACN,GAAO7I,MAAK,KAKT,MAJA6G,EAAa9C,UAEb8C,EAAa9C,QAAQuD,kBACrBT,EAAa9C,QAAQsG,kBAAoBxD,EAAa9C,QAAQuG,eAAiB,KAE/EnK,QAAQwB,IAAI,kBAAZ,UAA+BkF,EAAa9C,eAA5C,aAA+B,EAAsBoG,aACrDjB,YAAW,KAAM,MACf,UAAArC,EAAa9C,eAAb,SAAsBoF,mBACrB,MAEH9I,aAAc,iBAAkB,CAC9B7B,UAAU,MACR,UAAAqI,EAAa9C,eAAb,SAAsBoF,kBAExBoB,cAAc,UAO1B,CAAC3L,EAAI8M,EAAQ5C,KAGfpL,gBAAU,KACR6D,WAAQK,GAAG,KAAMwI,GACV,KACL7I,WAAQO,IAAI,KAAMsI,MAEnB,CAAC7I,EAAQ6I,KAEZ1M,gBAAU,KACRL,aAAa2M,QAAS,GAAErN,KAAaiC,KAAM,IAAIiL,MAAOI,UAAUC,cAC/D,CAACvN,EAAWiC,IAEf,MAAM6L,GAASnM,kBACZa,IACCA,EAAEU,iBACFM,QAAQwB,IAAIxC,GACZ,MAAMuL,EAAW,IAAIC,SACrB,GAAIxL,EAAEyL,aAAaC,OAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAI3L,EAAEyL,aAAaC,MAAM5B,OAAQ6B,IAE/C,GAAqC,SAAjC3L,EAAEyL,aAAaC,MAAMC,GAAGC,KAAiB,CAC3C,MAAMC,EAAO7L,EAAEyL,aAAaC,MAAMC,GAAGG,YACrC9K,QAAQwB,IAAI,YAAcmJ,EAAI,YAAcE,EAAKzN,MACjDmN,EAASQ,OAAO,QAASF,SAK7B,IAAK,IAAIF,EAAI,EAAGA,EAAI3L,EAAEyL,aAAaO,MAAMlC,OAAQ6B,IAC/C3K,QAAQwB,IAAI,YAAcmJ,EAAI,YAAc3L,EAAEyL,aAAaO,MAAML,GAAGvN,MACpEmN,EAASQ,OAAO,QAAS/L,EAAEyL,aAAaO,MAAML,IAGlD/K,SAAY,mBAAkBpD,SAAiBiC,WAAa8L,GAAU1K,MAAK,KACzEwJ,GAAY,GACZnM,aAAa2M,QAAS,GAAErN,KAAaiC,KAAM,IAAIiL,MAAOI,UAAUC,YAChExK,SAGJ,CAAC/C,EAAWiC,IAGRwM,GAAa9M,kBAAaa,IAC9BA,EAAEU,iBACFM,QAAQwB,IAAIxC,GACZqK,GAAY,KACX,IAEH,IAAKxM,IAAa0O,EAChB,OAAO,KAGT,MAAM1E,EAAemB,GAAYU,EAAY,GAAawC,UAAUxC,GAAUyC,UAAY,IAE1F,OACE,gBAAC,GAAD,CAAWb,OAAQA,EAAQW,WAAYA,GACrC,gBAAC,GAAD,KACE,uBAAK7G,IAAKC,QAAaxH,EAASsF,MAAO,CAAEmC,EAAG,OAAQC,EAAG,UAAYC,IAAK3H,EAASgE,WACjF,4BAAOhE,EAASgE,WAElB,gBAAC,GAAD,CACE6F,aAAcA,EACdC,cAAeA,EACfC,QAASA,EACTC,aAAcA,EACdC,QAASA,IAEX,gBAAC,EAAD,CACExD,aAAcA,EACdC,KAAMA,EACNC,aAAcA,EACdC,YAAc,WAAU5G,EAASgE,WACjCjE,KAAM,KAEPwM,GAAY,gBAACrB,GAAD,e,QCpLZ,MAAM6D,IAAY,cAAH,qBAAG,CAAH,sCAIT9D,IAAS,iBAAH,qBAAG,CAAH,mJASN+D,IAAa,cAAH,qBAAG,CAAH,uFAQVC,IAAe,cAAH,qBAAG,CAAH,gPAyBZC,IAAe,iBAAH,oBAAG,CAAH,wLAYZC,IAAmB,cAAH,oBAAG,CAAH,8CAKhBC,IAAa,cAAH,oBAAG,CAAH,wPAaVC,IAAW,cAAH,oBAAG,CAAH,wnBAoDRC,IAAgB,iBAAH,oBAAG,CAAH,4VAqBbC,IAAa,cAAH,oBAAG,CAAH,sEAKVC,IAAiB,cAAH,oBAAG,CAAH,iQAsBdC,IAAQ,cAAH,oBAAG,CAAH,iCAILC,IAAY,iBAAH,oBAAG,CAAH,mJAWTC,IAAkB,iBAAH,oBAAG,CAAH,gNC8C5B,GAvMkB,KAAM,QACtB,MAAMtN,GAASzC,WAET,UAAED,GAAc0C,GACfkC,EAAQqL,GAAoBpL,EAAU7E,IACrCI,KAAMC,EAAUkD,MAAO2M,EAAYnN,WAAYoN,IAAmB7P,QACxE,aACAC,MAEMH,KAAMqB,IAAgBnB,QAAmBD,EAAY,mBAAkBL,aAAuB,KAAMO,MACrG6P,EAA0BC,IAA+B7O,eAAS,IAClE8O,EAA0BjL,IAA+B7D,eAAS,IAClE+O,EAAwB9N,IAA6BjB,eAAS,IAC9DgP,EAAwB1K,IAA6BtE,eAAS,IAC9DiP,EAAcC,IAAmBlP,eAAS,IAC1CmP,EAAoBC,IAAyBpP,eAAS,IACtDqP,EAAcC,EAAsBC,IAAmBjO,OAAS,KAChEkO,EAAQC,EAAgBC,IAAapO,OAAS,IAE/CqO,GAAWxP,kBAAY,KAC3ByB,SACQ,qBACLC,MAAK,KACJ8M,OAED7M,OAAOC,IAAU,MAChBC,QAAQC,IAAIF,GACZG,WAAA,UAAYH,EAAMI,gBAAlB,aAAY,EAAgBvD,KAAM,CAAEwD,SAAU,uBAEjD,IAEGwN,GAAoBzP,kBACvBa,IACCA,EAAEU,iBACG2N,GAAiBA,EAAa1N,QAG9B6N,GAAWA,EAAO7N,QAGvBC,SACQ,kBAAmB,CACvBpD,UAAW6Q,EACXQ,IAAKL,IAEN3N,MAAK,KACJ8M,IACAE,GAA4B,GAC5BU,EAAgB,IAChBG,EAAU,OAEX5N,OAAOC,IAAU,MAChBC,QAAQC,IAAIF,GACZG,WAAA,UAAYH,EAAMI,gBAAlB,aAAY,EAAgBvD,KAAM,CAAEwD,SAAU,uBAGpD,CAACiN,EAAcG,IAGXM,GAAyB3P,kBAAY,KACzC0O,GAA4B,KAC3B,IAEGkB,GAAoB5P,kBAAY,KACpCc,GAA0B,KACzB,IAEG+O,GAAyB7P,kBAAY,KACzC0D,GAA4B,KAC3B,IAEGoM,GAAuB9P,kBAAY,KACvCmE,GAA0B,KACzB,IAEGxD,GAAeX,kBAAY,KAC/B0O,GAA4B,GAC5B5N,GAA0B,GAC1B4C,GAA4B,GAC5BS,GAA0B,KACzB,IAEG4L,GAAqB/P,kBAAY,KACrC+O,GAAiB9O,IAAUA,MAC1B,IAEG+P,IAAuBhQ,kBAAY,KACvCiP,GAAuBhP,IAAUA,MAChC,IAeH,OAbAb,gBAAU,IACD,KACLyC,QAAQkB,KAAK,oBAAqB1E,GAClCiQ,MAED,CAACA,EAAkBjQ,KACtBe,gBAAU,KACJU,GAAepB,IACjBmD,QAAQkB,KAAK,QAASE,GACtBA,WAAQgN,KAAK,QAAS,CAAE3P,GAAI5B,aAAF,EAAEA,EAAU4B,GAAI4P,SAAUpQ,EAAYO,KAAKsG,GAAMA,EAAErG,UAE9E,CAAC2C,EAAQvE,EAAUoB,KAEL,IAAbpB,EACK,gBAAC,KAAD,CAAUc,GAAG,WAIpB,2BACE,gBAAC,GAAD,KACGd,GACC,gBAAC+O,GAAD,KACE,wBAAMvN,QAAS6P,GACb,gBAACrC,GAAD,CAAYzH,IAAKC,QAAaxH,EAASsF,MAAO,CAAEmC,EAAG,OAAQC,EAAG,UAAYC,IAAK3H,EAASgE,YAEzFoM,GACC,gBAAC,EAAD,CAAMrK,MAAO,CAAE0L,MAAO,EAAGC,IAAK,IAAM3P,KAAMqO,EAAcnO,aAAcoP,GACpE,gBAACpC,GAAD,KACE,uBAAK1H,IAAKC,QAAaxH,EAASsF,MAAO,CAAEmC,EAAG,OAAQC,EAAG,UAAYC,IAAK3H,EAASgE,WACjF,2BACE,wBAAMpC,GAAG,gBAAgB5B,EAASgE,UAClC,wBAAMpC,GAAG,kBAAT,YAGJ,gBAACsN,GAAD,CAAc1N,QAASsP,GAAvB,WAMV,gBAAC3B,GAAD,KACE,gBAACC,GAAD,KACGpP,aADH,EACGA,EAAUoP,WAAWzN,KAAKgQ,GAEvB,gBAAC,KAAD,CAAM/Q,IAAK+Q,EAAG/P,GAAId,GAAK,cAAa6Q,EAAGX,kBACrC,gBAACrB,GAAD,KAAkBgC,EAAGpR,KAAKqR,MAAM,EAAG,GAAGC,kBAI5C,gBAACnC,GAAD,CAAWlO,QAASyP,GAApB,MAEF,gBAAC5B,GAAD,KACE,gBAACC,GAAD,CAAe9N,QAAS8P,IACrBtR,SADH,UACGA,EAAUoP,WAAWxD,MAAM3D,GAAMA,EAAE+I,MAAQrR,WAD9C,aACG,EAAuDY,MAE1D,gBAACgP,GAAD,KACE,gBAAC,EAAD,CAAMxN,KAAMuO,EAAoBrO,aAAcqP,GAAsBvL,MAAO,CAAE2L,IAAK,GAAII,KAAM,KAC1F,gBAACtC,GAAD,KACE,0BAAKxP,SAAL,UAAKA,EAAUoP,WAAWxD,MAAM3D,GAAMA,EAAE+I,MAAQrR,WAAhD,aAAK,EAAuDY,MAC5D,0BAAQiB,QAAS2P,GAAjB,kBACA,0BAAQ3P,QAAS0P,GAAjB,UACA,0BAAQ1P,QAAS4P,GAAjB,UACA,0BAAQ5P,QAASsP,GAAjB,UAGJ,gBAAC,EAAD,MACA,gBAAC,EAAD,QAGJ,gBAACrB,GAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAOsC,KAAK,yCAAyCC,UAAWjF,KAChE,gBAAC,KAAD,CAAOgF,KAAK,+BAA+BC,UAAWC,QAI5D,gBAAC,EAAD,CAAOlQ,KAAMgO,EAA0B9N,aAAcA,GACnD,wBAAMuB,SAAUuN,GACd,gBAAC,KAAD,CAAOnP,GAAG,mBACR,yCACA,gBAAC,KAAD,CAAOA,GAAG,YAAY6B,MAAO+M,EAAc9M,SAAU+M,KAEvD,gBAAC,KAAD,CAAO7O,GAAG,uBACR,0CACA,gBAAC,KAAD,CAAOA,GAAG,gBAAgB6B,MAAOkN,EAAQjN,SAAUkN,KAErD,gBAAC,KAAD,CAAQrL,KAAK,UAAb,UAGJ,gBAAC,EAAD,CACExD,KAAMmO,EACNjO,aAAcA,EACdG,0BAA2BA,IAE7B,gBAAC,EAAD,CACEL,KAAMkO,EACNhO,aAAcA,EACd+C,4BAA6BA,IAE/B,gBAAC,EAAD,CACEjD,KAAMoO,EACNlO,aAAcA,EACdwD,0BAA2BA,IAE7B,gBAAC,KAAD,CAAgBlC,SAAS,qB","file":"890.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","import { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useEffect, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\n\ninterface Props {\n  channel: IChannel;\n}\nconst EachChannel: VFC<Props> = ({ channel }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const date = localStorage.getItem(`${workspace}-${channel.name}`) || 0;\n  const { data: count, mutate } = useSWR<number>(\n    userData ? `/api/workspaces/${workspace}/channels/${channel.name}/unreads?after=${date}` : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/channel/${channel.name}`) {\n      mutate(0);\n    }\n  }, [mutate, location.pathname, workspace, channel]);\n\n  return (\n    <NavLink key={channel.name} activeClassName=\"selected\" to={`/workspace/${workspace}/channel/${channel.name}`}>\n      <span className={count !== undefined && count > 0 ? 'bold' : undefined}># {channel.name}</span>\n      {count !== undefined && count > 0 && <span className=\"count\">{count}</span>}\n    </NavLink>\n  );\n};\n\nexport default EachChannel;\n","import { CollapseButton } from '@components/DMList/styles';\nimport EachChannel from '@components/EachChannel';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\n\ninterface Props {\n  channelData?: IChannel[];\n  userData?: IUser;\n}\n\nconst ChannelList: FC<Props> = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map((channel) => {\n            return <EachChannel key={channel.id} channel={channel} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateModal, CloseModalButton } from '@components/Modal/styles';\nimport React, { FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n}\n\nconst Modal: FC<PropsWithChildren<Props>> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: (flag: boolean) => void;\n}\nconst CreateChannelModal: FC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\n  const params = useParams<{ workspace?: string }>();\n  const { workspace } = params;\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  const { data: userData } = useSWR<IUser | false>('/api/users', fetcher);\n  const { revalidate: revalidateChannel } = useSWR<IChannel[]>(\n    userData ? `/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const onCreateChannel = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newChannel || !newChannel.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels`, {\n          name: newChannel,\n        })\n        .then(() => {\n          revalidateChannel();\n          setShowCreateChannelModal(false);\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newChannel],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널 이름</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button>생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useEffect, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\n\ninterface Props {\n  member: IUser;\n  isOnline: boolean;\n}\nconst EachDM: VFC<Props> = ({ member, isOnline }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const date = localStorage.getItem(`${workspace}-${member.id}`) || 0;\n  const { data: count, mutate } = useSWR<number>(\n    userData ? `/api/workspaces/${workspace}/dms/${member.id}/unreads?after=${date}` : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/dm/${member.id}`) {\n      mutate(0);\n    }\n  }, [mutate, location.pathname, workspace, member]);\n\n  return (\n    <NavLink key={member.id} activeClassName=\"selected\" to={`/workspace/${workspace}/dm/${member.id}`}>\n      <i\n        className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n          isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n        }`}\n        aria-hidden=\"true\"\n        data-qa=\"presence_indicator\"\n        data-qa-presence-self=\"false\"\n        data-qa-presence-active=\"false\"\n        data-qa-presence-dnd=\"false\"\n      />\n      <span className={count && count > 0 ? 'bold' : undefined}>{member.nickname}</span>\n      {member.id === userData?.id && <span> (나)</span>}\n      {(count && count > 0 && <span className=\"count\">{count}</span>) || null}\n    </NavLink>\n  );\n};\n\nexport default EachDM;\n","import { useCallback } from 'react';\nimport io from 'socket.io-client';\n\nconst backUrl = 'http://localhost:3095';\n\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\n  const disconnect = useCallback(() => {\n    if (workspace && sockets[workspace]) {\n      sockets[workspace].disconnect();\n      delete sockets[workspace];\n    }\n  }, [workspace]);\n  if (!workspace) {\n    return [undefined, disconnect];\n  }\n  if (!sockets[workspace]) {\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n    console.info('create socket', workspace, sockets[workspace]);\n  }\n\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import EachDM from '@components/EachDM';\nimport useSocket from '@hooks/useSocket';\nimport { CollapseButton } from '@components/DMList/styles';\nimport { IDM, IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst DMList = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  useEffect(() => {\n    console.log('DMList: workspace 바꼈다', workspace);\n    setOnlineList([]);\n  }, [workspace]);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n    console.log('socket on dm', socket?.hasListeners('dm'), socket);\n    return () => {\n      console.log('socket off dm', socket?.hasListeners('dm'));\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            return <EachDM key={member.id} member={member} isOnline={isOnline} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { revalidate: revalidateMember } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMember();\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [workspace, newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import Modal from '@components/Modal';\nimport { Button, Label, Select } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\nlet kickMember = '';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowKickWorkspaceModal: (flag: boolean) => void;\n}\nconst KickWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowKickWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n  const { revalidate: revalidateMember } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  // const onChangeKickMember = useCallback(\n  //     (e) => {\n  //       setKickMember(e.target.value);\n  //     },\n  //     [kickMember],\n  // );\n\n  const onKickMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!kickMember || !kickMember.trim() || kickMember === '0') {\n        toast.error('사용자를 선택하세요.', { position: 'bottom-center' });\n        return;\n      } else {\n        axios\n          .delete(`/api/workspaces/${workspace}/members/${kickMember}`)\n          .then(() => {\n            setShowKickWorkspaceModal(false);\n            kickMember = '';\n            revalidateMember();\n          })\n          .catch((error) => {\n            console.dir(error);\n            setShowKickWorkspaceModal(false);\n            kickMember = '';\n            toast.error('사용자 삭제에 실패했습니다.', { position: 'bottom-center' });\n          });\n      }\n    },\n    [workspace],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onKickMember}>\n        <Label id=\"member-label\">\n          <span>사용자 이름</span>\n          {/*<Input id=\"member\" type=\"text\" value={kickMember} onChange={onChangeKickMember} />*/}\n          <Select\n            id=\"memberId\"\n            onChange={(e) => {\n              kickMember = e.target.value;\n              console.log(e.target.value);\n            }}\n          >\n            <option key={'0'} value={0}>\n              {'선택하세요'}\n            </option>\n            ;\n            {memberData?.map((member) => {\n              if (userData?.id !== member.id) {\n                return (\n                  <option key={member.id} value={member.id}>\n                    {member.nickname}\n                  </option>\n                );\n              }\n            })}\n          </Select>\n          <br />\n          <br />\n        </Label>\n        <Button type=\"submit\">사용자 삭제</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default KickWorkspaceModal;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateMenu, CloseModalButton } from '@components/Menu/styles';\nimport React, { CSSProperties, FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  style: CSSProperties;\n  closeButton?: boolean;\n}\n\nconst Menu: FC<PropsWithChildren<Props>> = ({ closeButton, style, show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div onClick={stopPropagation} style={style}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n\n  & strong {\n    background: skyblue;\n  }\n\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n\n  & img {\n    margin-right: 5px;\n  }\n\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatArea, Form, MentionsTextarea, SendButton, Toolbox, EachMention } from '@components/ChatBox/styles';\nimport { IUser } from '@typings/db';\nimport autosize from 'autosize';\nimport gravatar from 'gravatar';\nimport React, { FC, useCallback, useEffect, useRef } from 'react';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\n\ninterface Props {\n  onSubmitForm: (e: any) => void;\n  chat?: string;\n  onChangeChat: (e: any) => void;\n  placeholder: string;\n  data?: IUser[];\n}\nconst ChatBox: FC<Props> = ({ onSubmitForm, chat, onChangeChat, placeholder, data }) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, [textareaRef.current]);\n\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [chat],\n  );\n\n  const renderUserSuggestion: (\n    suggestion: SuggestionDataItem,\n    search: string,\n    highlightedDisplay: React.ReactNode,\n    index: number,\n    focused: boolean,\n  ) => React.ReactNode = useCallback(\n    (member, search, highlightedDisplay, index, focus) => {\n      if (!data) {\n        return null;\n      }\n      return (\n        <EachMention focus={focus}>\n          <img src={gravatar.url(data[index].email, { s: '20px', d: 'retro' })} alt={data[index].nickname} />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [data],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyPress={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={data?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderUserSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #eee;\n  }\n\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n\n    & > b {\n      margin-right: 5px;\n    }\n\n    & > span {\n      font-size: 12px;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { ChatWrapper } from '@components/Chat/styles';\nimport { IChat, IDM, IUser } from '@typings/db';\nimport dayjs from 'dayjs';\nimport gravatar from 'gravatar';\nimport React, { FC, useMemo, memo } from 'react';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport regexifyString from 'regexify-string';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst BACK_URL = 'http://localhost:3095';\nconst Chat: FC<Props> = memo(({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const user: IUser = 'Sender' in data ? data.Sender : data.User;\n\n  const result = useMemo<(string | JSX.Element)[] | JSX.Element>(\n    () =>\n      data.content.startsWith('uploads\\\\') ? (\n        <img src={`${BACK_URL}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            return <br key={index} />;\n          },\n          input: data.content,\n        })\n      ),\n    [workspace, data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n});\n\nexport default Chat;\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IChat, IDM } from '@typings/db';\nimport React, { FC, RefObject, useCallback } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  scrollbarRef: RefObject<Scrollbars>;\n  isReachingEnd?: boolean;\n  isEmpty: boolean;\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n}\nconst ChatList: FC<Props> = ({ scrollbarRef, isReachingEnd, isEmpty, chatSections, setSize }) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd && !isEmpty) {\n        setSize((size) => size + 1).then(() => {\n          scrollbarRef.current?.scrollTop(scrollbarRef.current?.getScrollHeight() - values.scrollHeight);\n        });\n      }\n    },\n    [setSize, scrollbarRef, isReachingEnd, isEmpty],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollbarRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n};\n\nexport default ChatList;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { revalidate: revalidateMembers } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection<T extends IDM | IChat>(chatList: T[]) {\n  const sections: { [key: string]: T[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Header, Container, DragOver } from '@pages/Channel/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport { Redirect } from 'react-router-dom';\nimport { toast, ToastContainer } from 'react-toastify';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst PAGE_SIZE = 20;\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [socket] = useSocket(workspace);\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { data: channelsData } = useSWR<IChannel[]>(`/api/workspaces/${workspace}/channels`, fetcher);\n  const channelData = channelsData?.find((v) => v.name === channel);\n  const { data: chatData, mutate: mutateChat, setSize } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            scrollbarRef.current?.scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [chat, onChangeChat, setChat] = useInput('');\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData && userData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: userData.id,\n            User: userData,\n            createdAt: new Date(),\n            ChannelId: channelData.id,\n            Channel: channelData,\n          });\n          return prevChatData;\n        }, false).then(() => {\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n          setChat('');\n          if (scrollbarRef.current) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            scrollbarRef.current.scrollToBottom();\n          }\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: savedChat,\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, channel, channelData, userData, chatData],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      if (data.Channel.name === channel && (data.content.startsWith('uploads\\\\') || data.UserId !== userData?.id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 100);\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [channel, userData, mutateChat],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  }, [workspace, channel]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n        localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (channelsData && !channelData) {\n    return <Redirect to={`/workspace/${workspace}/channel/일반`} />;\n  }\n\n  const chatSections = makeSection(chatData ? ([] as IChat[]).concat(...chatData).reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div style={{ display: 'flex', flex: 1, justifyContent: 'flex-end', alignItems: 'center' }}>\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList\n        scrollbarRef={scrollbarRef}\n        isReachingEnd={isReachingEnd}\n        isEmpty={isEmpty}\n        chatSections={chatSections}\n        setSize={setSize}\n      />\n      <ChatBox\n        onSubmitForm={onSubmitForm}\n        chat={chat}\n        onChangeChat={onChangeChat}\n        placeholder={`Message #${channel}`}\n        data={channelMembersData}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      <ToastContainer position=\"bottom-center\" />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & img {\n    margin-right: 5px;\n  }\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { DragOver } from '@pages/Channel/styles';\nimport { Header, Container } from '@pages/DirectMessage/styles';\nimport { IDM } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport gravatar from 'gravatar';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst PAGE_SIZE = 20;\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const [socket] = useSocket(workspace);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: chatData, mutate: mutateChat, setSize, revalidate } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            scrollbarRef.current?.scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n          setChat('');\n          if (scrollbarRef.current) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            scrollbarRef.current.scrollToBottom();\n          }\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, id, myData, userData, chatData],\n  );\n\n  const onMessage = useCallback(\n    (data: IDM) => {\n      if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 100);\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [id, myData, mutateChat],\n  );\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  }, [workspace, id]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setDragOver(false);\n        localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n        revalidate();\n      });\n    },\n    [workspace, id],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList\n        scrollbarRef={scrollbarRef}\n        isReachingEnd={isReachingEnd}\n        isEmpty={isEmpty}\n        chatSections={chatSections}\n        setSize={setSize}\n      />\n      <ChatBox\n        onSubmitForm={onSubmitForm}\n        chat={chat}\n        onChangeChat={onChangeChat}\n        placeholder={`Message ${userData.nickname}`}\n        data={[]}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n","import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n\n  & img {\n    display: flex;\n  }\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n\n    &.selected {\n      color: white;\n    }\n  }\n\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n\n  & h2 {\n    padding-left: 20px;\n  }\n\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import ChannelList from '@components/ChannelList';\nimport CreateChannelModal from '@components/CreateChannelModal';\nimport DMList from '@components/DMList';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport KickWorkspaceModal from '@components/KickWorkspaceModal';\nimport Menu from '@components/Menu';\nimport Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport Channel from '@pages/Channel';\nimport DirectMessage from '@pages/DirectMessage';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport gravatar from 'gravatar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Link, Redirect, Route, Switch } from 'react-router-dom';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport useSWR from 'swr';\n\nimport {\n  AddButton,\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceButton,\n  WorkspaceModal,\n  WorkspaceName,\n  Workspaces,\n  WorkspaceWrapper,\n} from './styles';\n\nconst Workspace = () => {\n  const params = useParams<{ workspace?: string }>();\n  // console.log('params', params, 'location', location, 'routeMatch', routeMatch, 'history', history);\n  const { workspace } = params;\n  const [socket, disconnectSocket] = useSocket(workspace);\n  const { data: userData, error: loginError, revalidate: revalidateUser } = useSWR<IUser | false>(\n    '/api/users',\n    fetcher,\n  );\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [showKickWorkspaceModal, setShowKickWorkspaceModal] = useState(false);\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n\n  const onLogOut = useCallback(() => {\n    axios\n      .post('/api/users/logout')\n      .then(() => {\n        revalidateUser();\n      })\n      .catch((error) => {\n        console.dir(error);\n        toast.error(error.response?.data, { position: 'bottom-center' });\n      });\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) {\n        return;\n      }\n      if (!newUrl || !newUrl.trim()) {\n        return;\n      }\n      axios\n        .post('/api/workspaces', {\n          workspace: newWorkspace,\n          url: newUrl,\n        })\n        .then(() => {\n          revalidateUser();\n          setShowCreateWorkspaceModal(false);\n          setNewWorkspace('');\n          setNewUrl('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl],\n  );\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowInviteWorkspaceModal(true);\n  }, []);\n\n  const onClickKickWorkspace = useCallback(() => {\n    setShowKickWorkspaceModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n    setShowKickWorkspaceModal(false);\n  }, []);\n\n  const onClickUserProfile = useCallback(() => {\n    setShowUserMenu((prev) => !prev);\n  }, []);\n\n  const toggleWorkspaceModal = useCallback(() => {\n    setShowWorkspaceModal((prev) => !prev);\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      console.info('disconnect socket', workspace);\n      disconnectSocket();\n    };\n  }, [disconnectSocket, workspace]);\n  useEffect(() => {\n    if (channelData && userData) {\n      console.info('로그인하자', socket);\n      socket?.emit('login', { id: userData?.id, channels: channelData.map((v) => v.id) });\n    }\n  }, [socket, userData, channelData]);\n\n  if (userData === false) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <div>\n      <Header>\n        {userData && (\n          <RightMenu>\n            <span onClick={onClickUserProfile}>\n              <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\n            </span>\n            {showUserMenu && (\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onClickUserProfile}>\n                <ProfileModal>\n                  <img src={gravatar.url(userData.email, { s: '36px', d: 'retro' })} alt={userData.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{userData.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={onLogOut}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </RightMenu>\n        )}\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData?.Workspaces.map((ws) => {\n            return (\n              <Link key={ws.id} to={`/workspace/${ws.url}/channel/일반`}>\n                <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n              </Link>\n            );\n          })}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceModal}>\n            {userData?.Workspaces.find((v) => v.url === workspace)?.name}\n          </WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>{userData?.Workspaces.find((v) => v.url === workspace)?.name}</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onClickKickWorkspace}>사용자 삭제</button>\n                <button onClick={onLogOut}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Switch>\n            <Route path=\"/workspace/:workspace/channel/:channel\" component={Channel} />\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\n          </Switch>\n        </Chats>\n      </WorkspaceWrapper>\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 url</span>\n            <Input id=\"workspace-url\" value={newUrl} onChange={onChangeNewUrl} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <KickWorkspaceModal\n        show={showKickWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowKickWorkspaceModal={setShowKickWorkspaceModal}\n      />\n      <ToastContainer position=\"bottom-center\" />\n    </div>\n  );\n};\n\nexport default Workspace;\n"],"sourceRoot":""}