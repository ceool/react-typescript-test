{"version":3,"sources":["webpack://slack-react-ts/./pages/Channel/styles.tsx","webpack://slack-react-ts/./pages/Channel/index.tsx"],"names":["Container","Header","DragOver","workspace","channel","useParams","data","myData","useSWR","fetcher","chat","onChangeChat","setChat","useInput","channelData","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","showInviteChannelModal","setShowInviteChannelModal","useState","dragOver","setDragOver","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","name","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","chatSections","makeSection","flat","reverse","className","onClick","aria-label","data-sk","type","aria-hidden","ChatList","ref","ChatBox","InviteChannelModal","show"],"mappings":"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","file":"256.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  \n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header, DragOver } from '@pages/Channel/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR, { useSWRInfinite } from 'swr';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (data.Channel.name === channel && data.UserId !== myData?.id) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      console.log('toBottomWhenLoaded', scrollbarRef.current);\n      setTimeout(() => {\n        console.log('scrollbar', scrollbarRef.current);\n        scrollbarRef.current?.scrollToBottom();\n      }, 500);\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"sourceRoot":""}